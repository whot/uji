# Top-level YAML entries must contain a type: tag
# that specifies the type of the entry.
#
# Reserved keywords:
#   version: <int>
#      The file format version. This must be a top-level section. Where
#      include directives are present, all included files must have the same
#      version. Where missing, the version number is 1.
#
#   include: path/to/file
#      Includes the given file with the path relative to the current file.
#      Inclusion is in situ, i.e. the location of the include directive
#      matters.
#
#   <section name>:
#      type: [actor|test]
#      See the description below
#
#   extends:
#      Allowed in sections of type actor or test.
#
#   file:
#     <some key>: |
#            some lengthy description of the tests
#
#     A section that describes the file itself. This description will be
#     copied into the resulting markdown file as the Uji section
#     description. The <some key> should be unique to avoid clashes when
#     including other files but it is not otherwise used. Use the filename.
#
#
# The actor type is an entity that a test is performed on.
# Allowed subkeys:
#    extends: inherit all from the referenced section
#    name: a human-readable name for the entity
#    description: a longer description for human consumption
#    tags: a dictionary of key: value that can be used to filter on
#          value must not be a list/dict
#
# The test type is a description of a test that may produce log files.
# Allowed subkeys:
#    extends: inherit all from the referenced section
#    name: a human-readable name for the test
#    description: a longer description for human consumption
#    filter: a dictionary to filter on. All keys+values of the actor must
#            match the entries in this dictionary.
#            The value must be a list, even if it's just one entry
#            Where the filter tag is missing, this test is assumed
#            to be run only once.
#            If a value starts with ! it's a negative match, i.e.
#            the tag must NOT be present in the actor.
#    tests: a list of instruction strings describing the tests to be
#           performed.
#    files: a list of files to collect
#    commands: a list of commands to run, each command has two keys:
#       run: the command to invoke
#       description: a description for human consumption
#       output: {single|multi|attach|exitcode|human}
#         value 'single' (default): the output is a single line
#         value 'multi': the output is multiple lines
#         value 'attach': the output should be attached as file
#         value 'exitcode': the output is the exit code of the command
#         value 'human': the output depends on human-interpretation
version: 1

file:
    example.yaml: |
        This is an example yaml file. The text here is used as the file
        description in the generated markdown file. This section can contain
        normal **markdown** syntax.

        You can add
        - list items
        - here as well
        And other things such as a [link to uji](https://github.com/whot/uji).

# First, let's define some actors. It's really up to you to decide what
# is an actor but as a general rule: it's a thing you test against.
# Since the tests will be executed against the actor itself, it pays off to
# have the actor defined as a very specific entity rather than as a
# representative of a group. IOW, use "G500s mouse" over "USB mouse".
#
# Since we support 'include:' statements, you could have files with all the
# hw you have defined in mice.yaml, keyboards.yaml, etc.

t450_keyboard:
  type: actor
  name: Lenovo T450s - AT Translated Keyboard
  description: Default built-in keyboard of the Lenovo T450s
  # tags is a dictionary of entries that the tests can later be filtered on
  # The keys are free-form.
  tags:
    device: keyboard
    bus: PS/2
    vendor: lenovo
    integration: internal

# inherits everything from above but overwrites the tags. The actor itself
# thus looks mostly the same, but since it's a different piece of HW we want
# to run the tests separately.
t460_keyboard:
  extends: t450_keyboard
  name: Lenovo T460s - AT Translated Keyboard
  description: Default built-in keyboard of the Lenovo T460s

macbook_keyboard:
  type: actor
  name: Apple Macbook 13 - Apple keyboard
  description: Macbook built-in USB keyboard
  tags:
    device: keyboard
    bus: USB
    vendor: apple
    integration: internal

logitech_keyboard:
  type: actor
  name: Logitech K800 Keyboard
  description: External Logitech keyboard.
  tags:
    device: keyboard
    bus: USB
    vendor: logitech
    integration: external

# Note the tags are completely free-form, not all are required, they only
# relate to the test filters so you can re-use them or use different ones
# for different sets of actors.
logitech_g500s:
  type: actor
  name: Logitech G500s
  description: |
    Logitech G500s external gaming mouse. Supports up to 5 profiles and is
    in 1000dpi out of the box.
  tags:
    device: mouse
    vendor: logitech
    connection: cable

logitech_mx_anywhere_2s:
  type: actor
  name: Logitech MX Anywhere 2S
  description: |
    Logitech MX Anywhere 2S gaming mouse connected over Unifying receiver.
  tags:
    device: mouse
    vendor: logitech
    connection: unifying

# Now let's define some test

# The filter arguments mean this will be tested on "device:keyboard" only
# but for any "bus:" value, iow the actor must have a bus: tag but the
# actual value doesn't matter. Actors without a bus: tag won't be matched
# against here.
test_keyboard:
  type: test
  filter:
    device: [keyboard]
    bus: [__any__]
  tests:
    - key presses QWERTY generate the expected key codes
    - kbd LEDs work as expected

# A test to run only on external keyboards
test_external_keyboards:
  type: test
  filter:
    device: [keyboard]
    integration: [external]
  tests:
    - keyboard works after unplug + plug

# A test to run only any USB keyboard
test_usb_hid:
  type: test
  filter:
    device: [keyboard]
    bus: [USB]
  tests:
    - verify hid report descriptor parses with `hid-parse`

# A test to run only on non-USB keyboards
test_nonusb:
  type: test
  filter:
    device: [keyboard]
    bus: ["!USB"]  # Note: YAML requires quotes
  tests:
    - "bus type for this keyboard is XXX"

# This is a test without a filter, so it will show up in the "Generic"
# section but not for any specific actor. Good for things you need to
# collect only once.
test_general:
  type: test
  tests:
    - hid-tools test suite successfully completed

test_system:
  type: test
  name: System Sanity Checks
  tests:
    - kernel not tainted on boot

test_hotplug_libinput:
  type: test
  filter:
    integration: [external]
  tests:
    - unplugging shows `DEVICE_ADDED`/`DEVICE_REMOVED` events
  logs:
      commands:
        - run: dmesg
          output: attach
          description: collect dmesg after plug/unplug

test_usb_logs:
  type: test
  filter:
    bus: [USB]
  tests:
    - check lsusb after plugin
  logs:
    commands:
      - run: lsusb -v
        output: attach

# A test without a 'tests' entry just collects logs
# This one we want for mice/keyboards but not for video cards
log_input_devices:
  type: test
  filter:
    device: [mouse, keyboard]
  logs:
      files:
        - /proc/bus/input/devices
      commands:
        - run: libinput record --all
          output: attach

log_version:
  type: test
  logs:
      commands:
        - run: libinput --version
          output: single

log_some_check:
  type: test
  filter:
    device: [videocard]
  logs:
      files:
        - /path/to/testsuite.output
      commands:
        - run: some-command
          output: exitcode

log_gtk:
  type: test
  logs:
      commands:
        - run: gnome-control-center
          output: human
          description: check scrolling works in the test area
